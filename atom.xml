<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kanghja.github.io/</id>
    <title>kanghj</title>
    <updated>2021-09-15T02:18:16.839Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kanghja.github.io/"/>
    <link rel="self" href="https://kanghja.github.io/atom.xml"/>
    <subtitle>我问燕子你为啥来，燕子说：你管好你自己！</subtitle>
    <logo>https://kanghja.github.io/images/avatar.png</logo>
    <icon>https://kanghja.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, kanghj</rights>
    <entry>
        <title type="html"><![CDATA[帮助文档]]></title>
        <id>https://kanghja.github.io/post/bang-zhu-wen-dang/</id>
        <link href="https://kanghja.github.io/post/bang-zhu-wen-dang/">
        </link>
        <updated>2021-09-14T06:34:24.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>本文档为帮助文档，用于记录Fog主题常见问题及解决办法，欢迎大家进行填补。</p>
</blockquote>
<h3 id="主题下载">主题下载</h3>
<p>方式一：在github或者gitee页面，下载zip压缩包。</p>
<p>方式二（推荐）：</p>
<p>已安装好git。</p>
<p>1.选择一个文件夹。利用cd命令进入。</p>
<p>2.在命令行输入以下随意一行命令（选择其一即可</p>
<pre><code class="language-p">git clone https://github.com/850552586/gridea-theme-fog.git

#推荐下行命令，速度较快
git clone https://gitee.com/ericam/gridea-theme-fog.git
</code></pre>
<p>如此便可下载fog主题，建议使用时将其中子文件夹fog复制到其他文件夹。</p>
<p>日后更新主题时只需要在该文件夹（gridea-theme-fog）下输入命令</p>
<pre><code>git pull origin
</code></pre>
<h3 id="如何使用该主题">如何使用该主题？</h3>
<p>将gridea-theme-fog下的fog子文件夹复制到gridea源文件的theme文件夹下即可。</p>
<h3 id="预览正常同步后页面很乱样式css不加载">预览正常，同步后页面很乱，样式（css）不加载</h3>
<p>强制刷新页面（ctrl+f5）</p>
<p>如果依然出现问题，请打开f12查看报错原因</p>
<h3 id="如何更换看板娘">如何更换看板娘</h3>
<p>如果你懂得简单代码，可自行进主题coding。</p>
<p>其他方式：</p>
<p>1.下载完后挑选一个自己喜欢的模型，复制assets文件夹替换到fog\assets\media\live2d路径下的assets文件夹</p>
<p>2.同时将该assets文件夹下的两个json文件重命名为</p>
<pre><code>1.tororo.model.json
2.tororo.pose.json
</code></pre>
<h3 id="如何配置valine">如何配置valine？</h3>
<p>你可以百度搜索 valine评论如何配置。</p>
<p>或者直接自行搜索 leancloud 注册个账号，就明白了。</p>
<h3 id="如何加速自己的站点">如何加速自己的站点？</h3>
<p>Coding速度远大于Github。</p>
<p>建议背景图图片进行压缩。推荐网址：https://tinypng.com/</p>
<p>文章图片推荐使用外链。（可自行了解图床。</p>
<p>如果你有自己的服务器，可以将博客部署到自己的服务器上。</p>
<h3 id="如果文章热度一直是loading">如果文章热度一直是Loading</h3>
<p>进入leancloud项目下，查看 部署-结构化数据 是否有Counter</p>
<p>如果没有，创建一个新的Class，名称为Counter</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea 简介]]></title>
        <id>https://kanghja.github.io/post/gridea-jian-jie/</id>
        <link href="https://kanghja.github.io/post/gridea-jian-jie/">
        </link>
        <updated>2021-09-14T06:33:41.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://cyhour.com/go/aHR0cHM6Ly9ncmlkZWEuZGV2Lz91dG1fc291cmNlPWN5aG91ci5jb20">Gridea</a>，一个静态博客写作客户端，小白也可以 <a href="https://cyhour.com/?s=GitHub+Pages">GitHub Pages</a> 搭建静态博客。开源、易用、强大。记录生活、心情、知识、笔记、创意...</p>
<h3 id="gridea-特色">Gridea 特色</h3>
<ul>
<li>Markdown：使用最酷的 Markdown 进行创作，专注内容，其他的交给 Gridea</li>
<li>封面图：快去挑选一张漂亮的封面图，为文章添彩，外链图也没问题哦</li>
<li>自定义标签：用标签来为文章进行归类，以你喜欢的方式：编程、旅行、读书笔记...，化繁为简、不必纠结</li>
<li>自定义菜单：我们提供了自定义菜单功能，同时贴心地准备了主页、归档和标签列表快捷选择。当然，你也可以创建外部菜单到任何地方</li>
<li>跨设备：Gridea 支持 Mac、Windows 和 Linux。同时支持更改源文件夹，利用 OneDrive、Dropbox 等同步工具，跨设备管理博客轻而易举！</li>
<li>多平台：Gridea 支持使用 Github Pages 和 Coding Pages 托管静态博客，Gridea v0.9.2 版本起更是支持 sftp 发布/更新网站到 VPS 等。</li>
<li>多评论：Gridea 内置 Gitalk 和 DisqusJS 两个评论系统，你可以任选其一，利用评论结交更多朋友！</li>
<li>多主题：目前提供了 4 款内置主题，每款主题都提供了丰富的自定义配置，稍加配置，遇见大不同</li>
<li>多语言：是的，我们贴心地为您内置了中文简体和 English 两种语言</li>
<li>快且安全：Gridea 所有文件都在本地，构建为更快更安全的静态网站，无需管理数据库。</li>
</ul>
<p>Gridea 官方上手教程：<a href="https://cyhour.com/go/aHR0cHM6Ly9mZWhleS5jb20vcG9zdC9odmUtbm90ZXMtc3RhcnQvP3V0bV9zb3VyY2U9Y3lob3VyLmNvbQ">网页</a> · <a href="https://cyhour.com/wp-content/uploads/2019/12/1231-gridea-tips-start.png">截图</a></p>
<h2 id="使用-gridea-搭建静态博客">使用 Gridea 搭建静态博客</h2>
<p>使用 Gridea 搭建静态博客常见有三种组合可以选择：Gridea + Github Pages 或者 Coding Pages、Gridea + Github + netlify.com 以及 Gridea + sftp（VPS 或者虚拟机），或者 <a href="https://cyhour.com/go/aHR0cHM6Ly93ZWIuZ3JpZGVhLmRldi8_dXRtX3NvdXJjZT1jeWhvdXIuY29t">Gridea 官方付费 Web 版本</a>，一年 ￥72，更省事，<a href="https://cyhour.com/wp-content/uploads/2021/07/1231_20210721_1037012.png">详细介绍</a>。</p>
<h3 id="gridea-本地环境搭建">Gridea 本地环境搭建</h3>
<p>如果你折腾过静态博客，上手 <a href="https://cyhour.com/tag/gridea/">Gridea</a> 没有任何门槛，就一碟小菜。</p>
<p>Gridea <a href="https://cyhour.com/go/aHR0cHM6Ly9naXRodWIuY29tL2dldGdyaWRlYS9ncmlkZWEvcmVsZWFzZXMvdGFnL3YwLjkuMj91dG1fc291cmNlPWN5aG91ci5jb20">v0.9.2</a> 版本开始已经更换 Git 部署模块，本地不需要安装 Git 也可以畅快使用 Gridea。</p>
<p><a href="https://cyhour.com/go/aHR0cHM6Ly9naXRodWIuY29tL2dldGdyaWRlYS9ncmlkZWEvcmVsZWFzZXM_dXRtX3NvdXJjZT1jeWhvdXIuY29t">Gridea 官网下载</a>对应平台程序进行安装即可。</p>
<p>Gridea v0.9.2 备用下载：<a href="https://cyhour.com/go/aHR0cDovL2N0LjB4by5uZXQvZi8xMjgxNjcyNC01MDI3NzAzNjYtODZjMzkzP3V0bV9zb3VyY2U9Y3lob3VyLmNvbQ">Windows</a> · · <a href="https://cyhour.com/go/aHR0cDovL2N0LjB4by5uZXQvZi8xMjgxNjcyNC01MDI3NzAzMjItMzViMjUwP3V0bV9zb3VyY2U9Y3lob3VyLmNvbQ">Mac</a> · · <a href="https://cyhour.com/go/aHR0cDovL2N0LjB4by5uZXQvZi8xMjgxNjcyNC01MDI3NzAyNTYtMWIxYWNjP3V0bV9zb3VyY2U9Y3lob3VyLmNvbQ">Linux</a></p>
<h3 id="使用-gridea-github-pagescoding-pages-方式搭建静态博客">使用 Gridea + Github Pages/Coding Pages 方式搭建静态博客</h3>
<p>Github / Coding 创建新 repository，配置 Github Pages/Coding Pages，Gridea 配置远程连接 Github Pages/Coding Pages 信息。</p>
<h4 id="创建-repository">创建 <a href="https://cyhour.com/go/aHR0cHM6Ly9naXRodWIuY29tL25ldz91dG1fc291cmNlPWN5aG91ci5jb20">repository</a></h4>
<figure data-type="image" tabindex="1"><a href="https://cyhour.com/wp-content/uploads/2019/12/1231-gridea-github-public.png"><img src="https://cyhour.com/wp-content/uploads/2019/12/1231-gridea-github-public.png" alt="img" loading="lazy"></a></figure>
<p>repository 需要选择 Public，Private 则需要 Pro 用户才能创建 GitHub Pages。</p>
<h4 id="开启-github-pages">开启 GitHub Pages</h4>
<p>进入 repository，Settings，GitHub Pages，可以选择 master 主分支直接生成 GitHub Pages，或者 /docs 目录。当然，也可以新建分支。</p>
<figure data-type="image" tabindex="2"><a href="https://cyhour.com/wp-content/uploads/2019/12/1231-gridea-github-pages.png"><img src="https://cyhour.com/wp-content/uploads/2019/12/1231-gridea-github-pages.png" alt="img" loading="lazy"></a></figure>
<p>开启后，重新找到 GitHub Pages 设置的地方，点击「Choose a theme」随意选择一个主题，初始化，GitHub Pages 就可以访问了。还可以自定义域名，强制开启 HTTPS。自定义域名，需要把域名 CNAME 到 .github.io</p>
<p>解析成功，等待24小时左右才能开启 HTTPS。（不过一般十来分钟就能搞定）</p>
<figure data-type="image" tabindex="3"><a href="https://cyhour.com/wp-content/uploads/2019/12/1231-gridea-github-pages-ssl.png"><img src="https://cyhour.com/wp-content/uploads/2019/12/1231-gridea-github-pages-ssl.png" alt="img" loading="lazy"></a></figure>
<h4 id="创建新-github-token">创建新 GitHub token</h4>
<p>Gridea 管理 GitHub Pages 需要 token。登录 GitHub，点击「<a href="https://cyhour.com/go/aHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL3Rva2Vucy9uZXc_dXRtX3NvdXJjZT1jeWhvdXIuY29t">这里</a>」创建一个新 token。勾选上 repo 相关权限即可。注意保存 token，关闭这个网页后就再也看不到它了。</p>
<figure data-type="image" tabindex="4"><a href="https://cyhour.com/wp-content/uploads/2019/12/1231-gridea-github-tokens.png"><img src="https://cyhour.com/wp-content/uploads/2019/12/1231-gridea-github-tokens.png" alt="img" loading="lazy"></a></figure>
<h4 id="gridea-配置">Gridea 配置</h4>
<p>配置不难，按实际配置即可。首先配置好「配置」-「基础配置」：</p>
<blockquote>
<p>域名：https://grieda.0xo.net —— 根据实际填写，自定义域名，或者 GitHub 二级域名<br>
仓库：grieda —— 如果不行，可以填写类似这种 ynzone.github.io 形式<br>
分支：main —— 一般主分支（以前是 master）<br>
仓库用户名：ynzone —— 一般就是用户名<br>
邮箱：pornhub@gmail.com —— GitHub 账户邮箱<br>
Token：••••••••••••••••••••••••••••••••••••••••<br>
CNAME：grieda.0xo.net —— 自定义域名一定要配置上</p>
</blockquote>
<figure data-type="image" tabindex="5"><a href="https://cyhour.com/wp-content/uploads/2019/12/1231-gridea-basic-setting.png"><img src="https://cyhour.com/wp-content/uploads/2019/12/1231-gridea-basic-setting.png" alt="img" loading="lazy"></a></figure>
<p>保存配置，测试连接成功即可。</p>
<h3 id="使用-gridea-github-netlifycom-方式搭建静态博客">使用 Gridea + Github + netlify.com 方式搭建静态博客</h3>
<p>方法基本上跟前面「使用 Gridea + Github Pages/Coding Pages 方式搭建静态博客」一样，只是最终使用 netlify.com 对外运行 Gridea 构建生成的静态博客 html。</p>
<p>这种方式优点是：使用 <a href="https://cyhour.com/go/aHR0cHM6Ly9uZXRsaWZ5LmNvbT91dG1fc291cmNlPWN5aG91ci5jb20">netlify.com</a> 连接 Github 仓库生成静态网站，Github repository 可以选择 Private，并且无需创建创建 GitHub Pages。</p>
<p>详细步骤：Github 创建新 repository，使用 Github 授权登录/注册 <a href="https://cyhour.com/go/aHR0cHM6Ly9uZXRsaWZ5LmNvbT91dG1fc291cmNlPWN5aG91ci5jb20">netlify.com</a>，netlify 建站，Gridea 配置远程连接 Github repository 信息。</p>
<h4 id="创建-repository-2">创建 <a href="https://cyhour.com/go/aHR0cHM6Ly9naXRodWIuY29tL25ldz91dG1fc291cmNlPWN5aG91ci5jb20">repository</a></h4>
<p><strong>此处 repository 需要选择 Private。</strong></p>
<figure data-type="image" tabindex="6"><a href="https://cyhour.com/wp-content/uploads/2019/12/1231-gridea-github-public.png"><img src="https://cyhour.com/wp-content/uploads/2019/12/1231-gridea-github-public.png" alt="img" loading="lazy"></a></figure>
<h4 id="netlify-注册建站">netlify 注册/建站</h4>
<p>使用 Github 账户授权注册/登录 netlify</p>
<figure data-type="image" tabindex="7"><a href="https://cyhour.com/wp-content/uploads/2021/07/1231_20210721_095808.png"><img src="https://cyhour.com/wp-content/uploads/2021/07/1231_20210721_095808.png" alt="img" loading="lazy"></a></figure>
<p>netlify 建站，「New site from Git」，选择 Github，按提示选择前面创建用来建站的 Private repository 即可。</p>
<figure data-type="image" tabindex="8"><a href="https://cyhour.com/wp-content/uploads/2021/07/1231_20210721_095950.png"><img src="https://cyhour.com/wp-content/uploads/2021/07/1231_20210721_095950.png" alt="img" loading="lazy"></a></figure>
<p>「Site settings」-「<a href="https://cyhour.com/go/aHR0cHM6Ly9hcHAubmV0bGlmeS5jb20vc2l0ZXMvc2Fyc3dpbi9zZXR0aW5ncy9nZW5lcmFsI3NpdGUtZGV0YWlscz91dG1fc291cmNlPWN5aG91ci5jb20">Site details</a>」配置网站信息，并将博客域名 cname 解析到 xxoo.netlify.app</p>
<figure data-type="image" tabindex="9"><a href="https://cyhour.com/wp-content/uploads/2021/07/1231_20210721_101229.png"><img src="https://cyhour.com/wp-content/uploads/2021/07/1231_20210721_101229.png" alt="img" loading="lazy"></a></figure>
<p><a href="https://cyhour.com/go/aHR0cHM6Ly9hcHAubmV0bGlmeS5jb20vc2l0ZXMvc2Fyc3dpbi9zZXR0aW5ncy9kb21haW4jZG9tYWlucz91dG1fc291cmNlPWN5aG91ci5jb20">Domains</a> 处配置自定义域名，开启免费 HTTPS……</p>
<figure data-type="image" tabindex="10"><a href="https://cyhour.com/wp-content/uploads/2021/07/1231_20210721_101228.png"><img src="https://cyhour.com/wp-content/uploads/2021/07/1231_20210721_101228.png" alt="img" loading="lazy"></a></figure>
<p>如果想 netlify 提供的二级域名也自动跳转到主自定义域名，在 Gridea 博客文件夹 static 目录下添加名为 _redirects 的文件，内容参考（域名信息请根据实际修改）：</p>
<pre><code># These rules will change if you change your site’s custom domains or HTTPS settings

# Redirect default Netlify subdomain to primary domain
https://sarswin.netlify.com/* https://sars.win/:splat 301!
</code></pre>
<h4 id="创建新-github-token-2">创建新 GitHub token</h4>
<p>Gridea 管理 GitHub Pages 需要 token。登录 GitHub，点击「<a href="https://cyhour.com/go/aHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL3Rva2Vucy9uZXc_dXRtX3NvdXJjZT1jeWhvdXIuY29t">这里</a>」创建一个新 token。勾选上 repo 相关权限即可。注意保存 token，关闭这个网页后就再也看不到它了。</p>
<figure data-type="image" tabindex="11"><a href="https://cyhour.com/wp-content/uploads/2019/12/1231-gridea-github-tokens.png"><img src="https://cyhour.com/wp-content/uploads/2019/12/1231-gridea-github-tokens.png" alt="img" loading="lazy"></a></figure>
<h4 id="gridea-配置-2">Gridea 配置</h4>
<p>配置不难，按实际配置即可。首先配置好「配置」-「基础配置」：</p>
<blockquote>
<p>域名：https://grieda.0xo.net —— 根据实际填写，自定义域名，或者 GitHub 二级域名<br>
仓库：grieda —— 如果不行，可以填写类似这种 ynzone.github.io 形式<br>
分支：main —— 一般主分支（以前是 master）<br>
仓库用户名：ynzone —— 一般就是用户名<br>
邮箱：pornhub@gmail.com —— GitHub 账户邮箱<br>
Token：••••••••••••••••••••••••••••••••••••••••<br>
CNAME：grieda.0xo.net —— 自定义域名一定要配置上</p>
</blockquote>
<figure data-type="image" tabindex="12"><a href="https://cyhour.com/wp-content/uploads/2019/12/1231-gridea-basic-setting.png"><img src="https://cyhour.com/wp-content/uploads/2019/12/1231-gridea-basic-setting.png" alt="img" loading="lazy"></a></figure>
<p>保存配置，测试连接成功即可。</p>
<h3 id="使用-gridea-sftpvps-或者虚拟机方式搭建静态博客">使用 Gridea + sftp（VPS 或者虚拟机）方式搭建静态博客</h3>
<p>购买<a href="https://cyhour.com/?s=%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA">虚拟主机</a>或者<a href="https://cyhour.com/vps"> VPS</a> 搭建好建站环境（无需数据库无需php，安装个 nginx 或者 Caddy 或者 Apache……即可）</p>
<figure data-type="image" tabindex="13"><a href="https://cyhour.com/wp-content/uploads/2021/07/1231_20210721_103701.png"><img src="https://cyhour.com/wp-content/uploads/2021/07/1231_20210721_103701.png" alt="img" loading="lazy"></a></figure>
<p>保存配置，测试连接成功即可。</p>
<p>其他配置按需要修改即可。文章 MarkDown 格式，保存在本地，也可以选择 Dropbox 同步。不折腾的话，默认主题选择一个喜欢的，就可以安心写博客了。</p>
<h2 id="gridea-搭建免费静态博客-免费-cloudflare-cdn">Gridea 搭建免费静态博客 + 免费 Cloudflare CDN</h2>
<p>前面提到使用 Gridea 搭建静态博客常见有三种组合可以选择：Gridea + Github Pages 或者 Coding Pages、Gridea + Github + netlify.com 以及 Gridea + sftp（VPS 或者虚拟机），或者 <a href="https://cyhour.com/go/aHR0cHM6Ly93ZWIuZ3JpZGVhLmRldi8_dXRtX3NvdXJjZT1jeWhvdXIuY29t">Gridea 官方付费 Web 版本</a>，一年 ￥72，更省事，<a href="https://cyhour.com/wp-content/uploads/2021/07/1231_20210721_1037012.png">详细介绍</a>。</p>
<p>如果是使用 Gridea + Github Pages 或者 Coding Pages、Gridea + Github + netlify.com 这两种方式，国内访问速度可能不太好，不妨套上免费 Cloudflare CDN，反正都是慢，套上 CDN 有些地方可能还有有惊喜。</p>
<p>这里以 Gridea + Github + netlify.com 为例简单介绍一下配置方法，准备工作：注册 Cloudflare 账户，DNS 使用 Cloudflare 解析……</p>
<p>Cloudflare DNS 解析参考：</p>
<figure data-type="image" tabindex="14"><a href="https://cyhour.com/wp-content/uploads/2021/07/1231_20210722_105112.png"><img src="https://cyhour.com/wp-content/uploads/2021/07/1231_20210722_105112.png" alt="img" loading="lazy"></a></figure>
<p>Cloudflare SSL/TLS 配置参考：</p>
<figure data-type="image" tabindex="15"><a href="https://cyhour.com/wp-content/uploads/2021/07/1231_20210722_105800.png"><img src="https://cyhour.com/wp-content/uploads/2021/07/1231_20210722_105800.png" alt="img" loading="lazy"></a></figure>
<p>完全(严格) 方式全程加密，netlify 服务端需要有受信任证书（比如 Let’s Encrypt，Github Pages 也可自动部署 Let’s Encrypt 证书），一般使用 自动部署 Let’s Encrypt 证书就好了。</p>
<p>折腾的话可以在 Cloudflare 「SSL/TLS」-「源服务器」-「源证书」中生成由 Cloudflare 签名的免费 TLS 证书，然后到 netlify -「Set custom certificate」处安装上（源证书仅对 Cloudflare 与源服务器（netlify）之间的加密有效）。</p>
<figure data-type="image" tabindex="16"><a href="https://cyhour.com/wp-content/uploads/2021/07/1231_20210722_111234.png"><img src="https://cyhour.com/wp-content/uploads/2021/07/1231_20210722_111234.png" alt="img" loading="lazy"></a></figure>
<p>Cloudflare 规则 - 页面规则 配置参考：</p>
<figure data-type="image" tabindex="17"><a href="https://cyhour.com/wp-content/uploads/2021/07/1231_20210722_111741.png"><img src="https://cyhour.com/wp-content/uploads/2021/07/1231_20210722_111741.png" alt="img" loading="lazy"></a></figure>
<p>静态站，一般一条规则就可以：缓存所有内容。</p>
<h2 id="gridea-静态博客-优秀主题收集推荐">Gridea 静态博客 优秀主题收集/推荐</h2>
<p>免费 Gridea Theme 收藏。</p>
<h3 id="林小沐gridea-theme-breek">林小沐：Gridea Theme Breek</h3>
<p><a href="https://cyhour.com/go/aHR0cHM6Ly9pLmltbW1tbS5jb20vZ3JpZGVhLXRoZW1lLWJyZWVrLz91dG1fc291cmNlPWN5aG91ci5jb20">Gridea Breek</a>，移植于 WordPress 同名主题 Breek @ <a href="https://cyhour.com/go/aHR0cDovL2VzdHVkaW9wYXRhZ29uLmNvbS90aGVtZXMvd29yZHByZXNzL2JyZWVrLz91dG1fc291cmNlPWN5aG91ci5jb20">预览</a> @ <a href="https://cyhour.com/wp-content/uploads/2021/07/1231_20210729_154859.png">截图</a></p>
<p>备用下载地址：</p>
<p>2020.04.12：<a href="https://cyhour.com/go/aHR0cDovL2N0LjB4by5uZXQvZi8xMjgxNjcyNC01MDM5MzY3OTItZTExZDQ4P3V0bV9zb3VyY2U9Y3lob3VyLmNvbQ">Gridea Theme Breek (v0.3.2)</a></p>
<p>演示站：<a href="https://sars.win/?utm_source=cyhour.com">世外桃源</a></p>
<p>注意：如看不到「<strong>绿皮火车</strong>」通道，请<strong>关闭浏览器屏蔽插件</strong>重试！解压密码 <strong>1024</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub Pages 搭建教程]]></title>
        <id>https://kanghja.github.io/post/github-pages-da-jian-jiao-cheng/</id>
        <link href="https://kanghja.github.io/post/github-pages-da-jian-jiao-cheng/">
        </link>
        <updated>2021-09-14T06:32:56.000Z</updated>
        <content type="html"><![CDATA[<p>[<img src="https://cdn.sspai.com/2019/08/29/abb84e35f5e215a5ddcbd7da42b1417c.gif?imageMogr2/auto-orient/quality/95/thumbnail/!64x64r/gravity/Center/crop/64x64/interlace/1" alt="Brick713" loading="lazy">]</p>
<p>2019年05月08日</p>
<p>互联网从诞生发展至今日，每天有无数的人在上面留下自己的足迹，他们用它记录生活、抒发情感、分享见解，这一切都离不开一个可以承载文字的平台，一个独立的、由自己掌控的平台，而 GitHub Pages 就是这么一个平台。</p>
<p>在这个平台里你可以使用自己的个性域名；可以在海量的主题里挑选最适合你的那一款，如果你技术极客，也可以根据自己的喜好，设计属于自己的个性化页面；你既可以在线创建和发布网站，也可以在本地通过客户端工具或者命令行进行网站和内容的管理。</p>
<p>你完全可以通过 GitHub Pages 展示和输出自身价值，甚至可以把它打造成属于自己的互联网「身份证」。</p>
<h2 id="为什么使用-github-pages">为什么使用 GitHub Pages</h2>
<p>如果你把他作为一个轻量级的个人博客服务，GitHub Pages 相较 WordPress 之类的建站服务有什么优势呢？</p>
<ul>
<li>首先他是完全免费的，相较其他的同类产品，他能替你省下一笔服务费，节约下的钱可以让你买一些其他的会员服务；</li>
<li>无须自己购买云服务进行搭建，只需按步骤一步步操作即可，即使你不懂他的技术细节；</li>
<li>支持的功能多，玩法丰富，你可以绑定你的域名、使用免费的 HTTPS、自己 DIY 网站的主题、使用他人开发好的插件等等；</li>
<li>当完成搭建后，你只需要专注于文章创作就可以了，其他诸如环境搭建、系统维护、文件存储的事情一概不用操心，都由 GitHub 处理</li>
</ul>
<p>当然了，作为一款免费的服务，我们也是要遵守 GitHub 官方使用建议和限制，在使用的时候项目和网站的大小不要超过 1GB，也不要过于频繁的更新网站的内容（每小时不超过 10 个版本），每个月的也要注意带宽使用上限为 100GB。</p>
<p>综合来看，GitHub Pages 依旧可以说是中小型博客或项目主页的最佳选项之一。</p>
<h2 id="如何使用-github-pages">如何使用 GitHub pages</h2>
<p>介绍了这么多，下面就具体来谈谈如何使用它。</p>
<h3 id="基本页面的生成">基本页面的生成</h3>
<p>首先你需要注册一个 GitHub 账号，并在个人主界面里选择创建一个新的 Repository 。</p>
<figure data-type="image" tabindex="1"><img src="https://cdn.sspai.com/20190506142539.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img" loading="lazy"></figure>
<p>进入页面后，在 Repository name 的位置填写域名，格式是 <code>username.GitHub.io</code>。</p>
<figure data-type="image" tabindex="2"><img src="https://cdn.sspai.com/special/314/pic_404.png" alt="图片" loading="lazy"></figure>
<p>创建成功之后，点击右上角的 Settings</p>
<figure data-type="image" tabindex="3"><img src="https://cdn.sspai.com/20190506142601.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img" loading="lazy"></figure>
<p>找到 GitHub Pages 选项，选择一个 GitHub 官方提供的主题</p>
<figure data-type="image" tabindex="4"><img src="https://cdn.sspai.com/20190506142607.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img" loading="lazy"></figure>
<p>这里我们就随意选择一个主题 Cayman，来看看他的效果是什么样的</p>
<figure data-type="image" tabindex="5"><img src="https://cdn.sspai.com/20190506143205.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img" loading="lazy"></figure>
<p>选择完毕之后 GitHub Pages 就会自动帮你生成好网站，在他跳转的界面点击 Commit changes 按钮，网站就可以访问了。</p>
<figure data-type="image" tabindex="6"><img src="https://cdn.sspai.com/20190506143333.gif" alt="img" loading="lazy"></figure>
<p>在浏览器里输入你的项目名称，比如 <a href="https://brick713.github.io/">brick713.GitHub.io</a>，就可以看到，你刚刚选择的主题的个人网站的页面了。</p>
<figure data-type="image" tabindex="7"><img src="https://cdn.sspai.com/20190506143441.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img" loading="lazy"></figure>
<p>到这里如果你只是想做一个例如可以随时在互联网上访问的简历，那么你只需要 GitHub Pages 项目的主页修改你 <a href="http://index.md/">index.md</a> 文件就可以了，比如我给出的这个模板。</p>
<figure data-type="image" tabindex="8"><img src="https://cdn.sspai.com/20190506143459.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img" loading="lazy"></figure>
<p>修改完后，点击上图中左下角的 Commit Changes，然后访问你的自定义域名你就可以看到如下的样式了。</p>
<figure data-type="image" tabindex="9"><img src="https://cdn.sspai.com/20190506143603.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img" loading="lazy"></figure>
<p>如果你想做一个功能更丰富的博客，那我们继续往下走。</p>
<h3 id="配置自定义域名并免费使用-https">配置自定义域名并免费使用 HTTPS</h3>
<p>在 2018 年 5 月 1 日之后，GitHub Pages 已经开始提供免费为自定义域名开启 HTTPS 的功能，并且大大简化了操作的流程，现在用户已经不再需要自己提供证书，只需要将自己的域名使用 CNAME 的方式指向自己的 GitHub Pages 域名即可。</p>
<p>首先在你的 DNS 解析里添加一条解析记录，例如我选择添加子域名 <code>blog.moyu.life</code> 通过 CNAME 的方式指向我刚刚自定义的 GitHub Pages 域名 <code>brick713.GitHub.io</code>。添加完成后等待 DNS 解析的生效（DNS 的解析记录生效到全球可能需要几分钟时间）。</p>
<figure data-type="image" tabindex="10"><img src="https://cdn.sspai.com/20190508161054.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img" loading="lazy"></figure>
<p>之后重新回到最开始进入过的 Settings 界面，找到 GitHub Pages 的设置，填写我们刚刚建立的子域名，以我自己的 blog.moyu.life 举例，点击保存。</p>
<figure data-type="image" tabindex="11"><img src="https://cdn.sspai.com/20190508161109.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img" loading="lazy"></figure>
<p>保存后 GitHub 需要一定的时间生成证书并确认域名的解析是否正常，我们只需要耐心的等待即可，成功后显示结果如下</p>
<figure data-type="image" tabindex="12"><img src="https://cdn.sspai.com/20190508161122.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img" loading="lazy"></figure>
<p>现在我们再访问 blog.moyu.life 就会发现，我们的自定义域名和 HTTPS 都生效了！可以看到证书是由著名的机构 Let's Encrypt 提供的。</p>
<figure data-type="image" tabindex="13"><img src="https://cdn.sspai.com/20190508161133.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img" loading="lazy"></figure>
<h3 id="网站的同步">网站的同步</h3>
<p>现在我们已经有了一个基本功能健全的网站了，接下来我们需要试着对博客的内容进行管理，并且给博客添加一些更个性化的设置，官方提供两种方式：</p>
<ul>
<li>命令行方式（Mac 和 Windows 确保拥有 Git 环境）</li>
<li>桌面客户端形式（需要安装官方提供的客户端）</li>
</ul>
<p>如果你没有任何 Git 的基础，也不想进行一些繁琐的配置，那么我推荐你使用桌面客户端的形式进行管理，如果你有一定的技术基础，那么 Git 的方式则更适合你。这里我两种方法都介绍一下。</p>
<p>首先在命令行中切换到你自定义的路径下，然后 Clone 下来你的项目（操作需要在 Mac 的 Terminal 中完成，Windows 系统可以使用 Git-bash。）这里注意这里的 path 和 username 需要根据你个人情况进行替换。</p>
<pre><code>cd ~/Path git clone https://GitHub.com/username/username.GitHub.io
</code></pre>
<figure data-type="image" tabindex="14"><img src="https://cdn.sspai.com/2019/05/09/0ac45ab544aaed52fa54338b9e84f43e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img" loading="lazy"></figure>
<p>接着进入你的项目的文件中，并创作一个文章。</p>
<pre><code>cd username.GitHub.io
echo &quot;Hello World 我爱这个世界&quot; &gt; index.md
</code></pre>
<p>然后按照 Git 提交内容的流程，将我们的新创作的文章上传。</p>
<pre><code>git add --all
git commit -m &quot;Firs Push&quot;
git push -u origin master
</code></pre>
<p>这里可能会碰到下面的情况：</p>
<figure data-type="image" tabindex="15"><img src="https://cdn.sspai.com/2019/05/09/e2389fe0c465bab0fdc263e96574238f.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img" loading="lazy"></figure>
<p>按照他的提示我们把注册 GitHub 的邮箱和用户名依次输入即可：</p>
<pre><code>git config user.email &quot;你的邮箱&quot;
git config user.name &quot;你的用户名&quot;
</code></pre>
<p>之后他可能会让你输入你的 GitHub 账号和密码，不用担心，正常输入即可。当我们看到这样的提升就证明提交成功了。</p>
<figure data-type="image" tabindex="16"><img src="https://cdn.sspai.com/2019/05/09/f707deafab9ed1231d20af9ed4185af2.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img" loading="lazy"></figure>
<p>可以去我们的网站主页看看是不是起了变化。</p>
<figure data-type="image" tabindex="17"><img src="https://cdn.sspai.com/20190508161225.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img" loading="lazy"></figure>
<p>如果你是使用<a href="https://desktop.github.com/">GitHub 桌面客户端</a> 那么就更简单了，下载安装了客户端之后，按照客户端的提示正常登陆你的 GitHub 账号。然后 Clone 下来你的 GitHub Pages 项目。</p>
<figure data-type="image" tabindex="18"><img src="https://cdn.sspai.com/20190508161237.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img" loading="lazy"></figure>
<p>等待 Clone 完成后，界面上会显示几种管理修改你的项目的方式。</p>
<figure data-type="image" tabindex="19"><img src="https://cdn.sspai.com/20190508161341.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img" loading="lazy"></figure>
<p>这里我选择使用 Sublime Text 进行管理，把开始的 <a href="http://index.md/">index.md</a> 里的内容改为 <code>Hello World 我也爱这个世界</code> 保存，然后在客户端上我们能看到文件的变化，我们先点击左下角的 Commit to master，再点击 Fetch origin 就可以将内容上传。</p>
<figure data-type="image" tabindex="20"><img src="https://cdn.sspai.com/20190508161353.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img" loading="lazy"></figure>
<p>然后你发现你的主页也发生了相应改变了。到这里你基本上就掌握了网站管理的基本流程和文章发布的基本流程，下面我们要开始来学会使用静态模板系统来管理博客了。</p>
<h3 id="github-pages-的生成工具">GitHub Pages 的生成工具</h3>
<p>经历了上面的步骤，现在你的已经有了一个简单的页面了，可是他还远远未满足我们的需求，我们需要利用静态模板系统来让生产接管你博客的文章的生成，让你把更多的经历投入在创作里。下面就 GitHub 官方推荐的 Jekyll 为例子来展开讲讲。</p>
<p>因为 Jekyll 是基于 Ruby 的静态网页生成系统，因此我们首先得安装 Ruby 环境，在 Mac 下我们可以使用的 Homebrew 来进行安装。如果是其他操作系统，可以去参考 <a href="https://www.ruby-lang.org/en/documentation/installation/">Ruby 官方安装文档</a>进行安装。</p>
<pre><code>brew install ruby
</code></pre>
<p>等 Ruby 安装完毕后再执行以下命令完成 Jekyll 的安装。</p>
<pre><code>gem install jekyll bundler
</code></pre>
<p>然后进入你 Clone 下来的 GitHub Pages 项目的路径，例如：</p>
<figure data-type="image" tabindex="21"><img src="https://cdn.sspai.com/20190508161408.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img" loading="lazy"></figure>
<p>执行以下命令：</p>
<pre><code>jekyll new . --force
</code></pre>
<p>完成后，Jekyll 会在你指定的目录下生成好所有文件，你可以使用 <code>bundle exec jekyll serve</code> 命令，然后就可以通过访问 <code>127.0.0.1:4000</code> 查看初始界面的样子了。</p>
<figure data-type="image" tabindex="22"><img src="https://cdn.sspai.com/20190508161423.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img" loading="lazy"></figure>
<p>默认的界面看起来非常的简陋也很丑，但是没关系，你可以在这些网站里根据自己的喜好找到一些美观的主题http://jekyllthemes.org/、https://jekyllthemes.io/、http://themes.jekyllrc.org/。</p>
<p>安装方法很简单，一般情况下只需要下载主题包解压后完整的，复制到你的 GitHub Pages 的项目目录里，并覆盖你之前的文件即可，有些特殊的主题要参考作者给的安装步骤，这里我随意的更换了一个主题。</p>
<figure data-type="image" tabindex="23"><img src="https://cdn.sspai.com/20190508161453.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img" loading="lazy"></figure>
<p>主题里的所有关键性配置都在 _config.yml 文件中，你可以根据个人的喜好和不同主题支持的功能来修改具体的内容，这里就不做展开。</p>
<p>到这里完整的搭建的流程已经结束了，你已经可以正常访问你一路配置下来的博客了，接下来你只需要找一个趁手的 Markdown 编辑器来编辑在你本地 GitHub Pages 项目中的 _posts 文件夹里的文章，并使用前面提到的两种方式将文章同步到 GitHub 上即可。需要注意的是，文章的内容和标题需要按照 Jekyll 的格式进行写作。</p>
<p>文章的文件名遵循下面的格式：</p>
<pre><code>年-月-日-标题.markdown
</code></pre>
<p>文章内容顶部必须有下面的 YAML 头信息：</p>
<pre><code>---layout: posttitle: Blogging Like a Hacker---
</code></pre>
<h2 id="尾巴">尾巴</h2>
<p>其实除了 Jekyll 还有非常多的第三方的静态模板系统来搭建 GitHub Pages。比如：</p>
<ul>
<li>Node.js 编写的 Hexo</li>
<li>Go 编写的 Hugo</li>
<li>Python 编写的 Pelican</li>
<li>以及更人性化的 Gridea</li>
</ul>
<p>他们在各自的基础上实现了更多的功能，比如分析统计、搜索、评论系统、广告、分享系统等。喜欢折腾的同学不妨可以尝试尝试，未来如果有机会希望能更详细的给大家分享一下。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何自定义Github Pages的域名并使用HTTPS]]></title>
        <id>https://kanghja.github.io/post/ru-he-zi-ding-yi-github-pages-de-yu-ming-bing-shi-yong-https/</id>
        <link href="https://kanghja.github.io/post/ru-he-zi-ding-yi-github-pages-de-yu-ming-bing-shi-yong-https/">
        </link>
        <updated>2021-09-14T06:31:53.000Z</updated>
        <content type="html"><![CDATA[<p>2018-07-24543<a href="https://www.sjlei.com/tags/Github/">Github </a><a href="https://www.sjlei.com/tags/Github-Pages/">Github Pages </a><a href="https://www.sjlei.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89/">自定义 </a><a href="https://www.sjlei.com/tags/%E5%9F%9F%E5%90%8D/">域名 </a><a href="https://www.sjlei.com/tags/HTTPS/">HTTPS </a><a href="https://www.sjlei.com/tags/Hexo/">Hexo</a></p>
<figure data-type="image" tabindex="1"><img src="https://img.sjlei.com/post/2018/7/24/1/cover.jpg" alt="img" loading="lazy"></figure>
<ol>
<li><a href="https://www.sjlei.com/p/56333/#%E5%89%8D%E8%A8%80">1. 前言</a></li>
<li><a href="https://www.sjlei.com/p/56333/#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E5%87%86%E5%A4%87%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D">2. 第一步：准备自定义域名</a></li>
<li><a href="https://www.sjlei.com/p/56333/#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D">3. 第二步：配置自定义域名</a></li>
<li><a href="https://www.sjlei.com/p/56333/#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E5%8F%AF%E9%80%89%EF%BC%8C%E9%85%8D%E7%BD%AEHTTPS">4. 第三步：可选，配置HTTPS</a></li>
<li><a href="https://www.sjlei.com/p/56333/#%E7%AC%AC%E5%9B%9B%E6%AD%A5%EF%BC%9A%E5%8F%AF%E9%80%89%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%BD%BF%E7%94%A8hexo-deploy%E5%91%BD%E4%BB%A4%E4%B9%8B%E5%90%8E%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%A4%B1%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98">5. 第四步：可选，解决使用hexo deploy命令之后自定义域名失效的问题</a></li>
<li><a href="https://www.sjlei.com/p/56333/#%E6%B3%A8%E6%84%8F%E5%95%A6">6. 注意啦</a></li>
</ol>
<h3 id="前言">前言</h3>
<p>Github推出的Pages服务真的是太好用了，可以用到免费的空间，再加上Hexo就可以实现一个静态的博客系统了。想了解的可以去看<a href="https://www.sjlei.com/p/54267/">这篇文章</a>。<br>
然而域名默认使用<code>username.github.io</code>，我尝试在自己的域名上加了一个<code>CNAME</code>，结果却报了404，所以看来想要自定义域名没那么简单。<br>
然后去官网翻了半天文档，终于找到了这篇《<a href="https://help.github.com/articles/quick-start-setting-up-a-custom-domain/">Quick start: Setting up a custom domain</a>》文章，研究了半天终于研究出来了，现在分享给大家！</p>
<h3 id="第一步准备自定义域名">第一步：准备自定义域名</h3>
<p>如果你还没有域名，就去各大域名注册商注册一个吧</p>
<h3 id="第二步配置自定义域名">第二步：配置自定义域名</h3>
<ol>
<li>去Github，跳转到你的<code>Pages</code>所在的<code>repository</code></li>
<li>在你的<code>repository</code>下，单击<code>Settings</code><br>
<img src="https://img.sjlei.com/post/2018/7/24/1/1.png" alt="Settings" loading="lazy"></li>
<li>向下翻阅，找到<code>GitHub Pages</code>下的<code>Custom domain</code></li>
<li>在输入框中输入你的自定义域名，并点击<code>Save</code>，但并不是所有的域名都支持，要看支持的类型请参阅《<a href="https://help.github.com/articles/about-supported-custom-domains/">About supported custom domains</a>》<br>
<img src="https://img.sjlei.com/post/2018/7/24/1/2.png" alt="Custom domain" loading="lazy"></li>
<li>在你的自定义域名上添加<code>CNAME</code>解析记录，解析到你的GitHub Pages默认域名下即可（如下图）<br>
<img src="https://img.sjlei.com/post/2018/7/24/1/11.png" alt="CNAME" loading="lazy"></li>
<li>等待最多十分钟之后，你就可以直接通过自定义域名访问你的GitHub Pages页面了！</li>
<li>**注意：**如果你使用了<code>Hexo</code>来部署你的博客，那么在使用<code>hexo deploy</code>命令之后这一步将会失效，解决方法请看第四步</li>
</ol>
<h3 id="第三步可选配置https">第三步：可选，配置HTTPS</h3>
<p>到第二步基本上就算是完成了，但如果你想用<code>https</code>协议访问，而自己的域名没有SSL证书的话则会报 <strong>不安全的连接</strong><br>
<img src="https://img.sjlei.com/post/2018/7/24/1/3.png" alt="no ssl" loading="lazy"><br>
所以这一步来讲讲怎么使用https访问，原文《<a href="https://help.github.com/articles/securing-your-github-pages-site-with-https/">Securing your GitHub Pages site with HTTPS</a>》</p>
<ol>
<li>首先需要申请证书，我是在阿里云上注册的域名，所以这里讲一下如何在阿里云上申请SSL证书，其他注册商还需自行搜索相关资料</li>
<li>进入管理控制台，找到域名列表，在想要申请的域名右侧点击<code>SSL证书</code><br>
<img src="https://img.sjlei.com/post/2018/7/24/1/4.jpg" alt="SSL证书" loading="lazy"></li>
<li>然后选择“单域名免费证书”，输入你的自定义域名，点击确定。（当然如果你有钱想要买通配的我也不拦着XD）<br>
<img src="https://img.sjlei.com/post/2018/7/24/1/5.png" alt="SSL证书" loading="lazy"></li>
<li>然后填写一堆资料以后，点击提交审核</li>
<li>等待大概三分钟到十分钟左右的时间，证书状态会变成 <strong>已签发</strong><br>
<img src="https://img.sjlei.com/post/2018/7/24/1/6.png" alt="SSL证书" loading="lazy"></li>
<li>但如果 <strong>审核失败</strong> 的话，则需要按照失败的原因进行下一步的操作了</li>
<li>接下来就可以使用https协议访问你的站点啦<br>
<img src="https://img.sjlei.com/post/2018/7/24/1/9.png" alt="SSL证书" loading="lazy"></li>
</ol>
<p>但如果想要使用http的时候自动跳转到https怎么办呢？其实GitHub Pages是提供这一项服务的。<br>
首先还是打开<code>repository</code>的<code>Settings</code>页面，向下翻阅，找到<code>GitHub Pages</code>下的<code>Enforce HTTPS</code>并且打上勾即可。<br>
<img src="https://img.sjlei.com/post/2018/7/24/1/7.png" alt="Enforce HTTPS" loading="lazy"><br>
但注意，如果你的站点没有配置SSL证书，那么这个选项是灰色的，所以得实现了上面的7个步骤才可以！</p>
<h3 id="第四步可选解决使用hexo-deploy命令之后自定义域名失效的问题">第四步：可选，解决使用<code>hexo deploy</code>命令之后自定义域名失效的问题</h3>
<p>如果你使用了Hexo来部署你的博客，那么在使用<code>hexo deploy</code>命令之后第二步配置的自定义域名将会失效，原因是hexo会自动清空存储库，删除无关的文件。<br>
解决方法：</p>
<ol>
<li>每次都在Settings页面中重新配置一下，很显然这种做法是不明智的</li>
<li>在你的<code>source</code>目录下新建一个<code>CNAME</code>文件，注意CNAME全大写，里面就填上你的自定义域名即可<br>
<img src="https://img.sjlei.com/post/2018/7/24/1/10.png" alt="CNAME" loading="lazy"></li>
</ol>
<h3 id="注意啦">注意啦</h3>
<p>如果你在执行以上步骤的时候，没有达到预期的效果，不要着急，按照缓存这尿性，<strong>完全关了浏览器并多等一会就好了</strong>，如果等了十几分钟还不好，就要看看操作上是否有失误的地方了~</p>
]]></content>
    </entry>
</feed>